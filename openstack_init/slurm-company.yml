heat_template_version: 2018-08-31 # rocky
description: Setup company of slurm VMs
parameters:
  def_image:
    type: string
    label: OS image
    description: image for VMs
    default: CentOS-Stream-8_20210210
  def_network:
    label: Network
    type: string
  def_flavor:
    type: string
    label: Flavor of the compute nodes
    description: default flavor type
    default: normal
    constraints:
      - allowed_values: [ normal, large, xlarge, xlarge-mem, xlarge-mem128]
        description: normal, large, xlarge, xlarge-mem, xlarge-mem128
  slurm_controller_ssh_key:
    type: string
    label: Existing Key Name for controller 
    description: Name of key pair for accessint a controlles instance
  slurm_company_ssh_key_name:
    type: string
    label: Key Name for New Key Pair
    description: Please enter the name of new key pair for communication between nodes
  # git_project_access_token:
  #   type: string
  #   label: Git access token
  #   description: Please enter the git access token with pull permission for project slurm-openstack
  
resources:
  slurm_company_ssh_key:
    type: OS::Nova::KeyPair
    properties:
      save_private_key: true
      # replace tmstmp (feature to be implemented) with timestamp
      name: { get_param : slurm_company_ssh_key_name } 
  master_node:
    type: OS::Nova::Server
    properties:
      flavor: normal
      image: { get_param: def_image }
      key_name: { get_param : slurm_controller_ssh_key }
      user_data: { get_resource: boot_script }
      user_data_format: RAW
      metadata:
        ips:
          compute1: { get_attr: [compute1, first_address] }
          compute2: { get_attr: [compute2, first_address] } # user should add metadata ip
        access_token: { get_param: git_project_access_token }
        #compute_ssh_key: { get_attr: [slurm_company_ssh_key, private_key] }
      networks:
        - network: { get_param: def_network }
  # define wanted compute nodes by user
  compute1:
    type: OS::Nova::Server
    properties:
      flavor: { get_param: def_flavor }
      image: { get_param: def_image }
      key_name: { get_resource : slurm_company_ssh_key }
      networks:
        - network: { get_param: def_network }
  compute2:
    type: OS::Nova::Server
    properties:
      flavor: { get_param: def_flavor }
      image: { get_param: def_image }
      key_name: { get_resource : slurm_company_ssh_key }
      networks:
        - network: { get_param: def_network }
  # end - define wanted compute nodes by user
  boot_script:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: 
        str_replace: 
          params: 
            ssh_private_key_temp: 
              get_attr: [slurm_company_ssh_key, private_key]
          template: |
            #!/usr/bin/bash
            user_name=`whoami`
            yum install -y python3 centos-release-ansible-29 epel-release jq git

            install_dir="/tmp/slurm-install"
            mkdir $install_dir
            meta_file="$install_dir/meta_data.json"
            curl http://169.254.169.254/openstack/latest/meta_data.json > $meta_file # download metadata

            slave_ips=`jq -r ".meta.ips" $meta_file | jq -r ". | to_entries[].value"`
            slave_names=`jq -r ".meta.ips" $meta_file | jq -r ". | to_entries[].key"`

            __MASTER_NAME=slurmMaster
    
            _MASTER_IP=`python3 -c "import socket; print(socket.gethostbyname(socket.gethostname()))"`


            #repo with playbook and role for ansible
            __slurm_repo_dir="$install_dir/slurm-openstack"
            mkdir $__slurm_repo_dir
            git clone "https://github.com/jsw0011/slurm-openstack-devel-plugin.git" $__slurm_repo_dir 
            
            __scripts_path=$__slurm_repo_dir/openstack_init/scripts
            chmod +x $__scripts_path/*

            #set hosts
            sethostname $__MASTER_NAME
            
            echo -e "$__MASTER_NAME $_MASTER_IP\n" | tee -a $install_dir/hosts
            slave_hosts=`python3 $__scripts_path/gen-hosts.py "$slave_ips" "$slave_names"`

            echo -e "$slave_hosts\n" | tee -a $install_dir/hosts

            cat $install_dir/hosts | tee -a /etc/hosts


            ssh_priv_key="ssh_private_key_temp"
            #`jq -r ".meta.compute_ssh_key" $meta_file`

            slave_hosts_inventory=`python3 $__scripts_path/gen-ansible-inventory-vm-list.py "$slave_ips" "$slave_names"`

            echo -e "slurm-master:
                hosts:
                    -
                      name: $__MASTER_NAME
                      ip: $_MASTER_IP
                slurm-slaves:
                    hosts:
                $slave_hosts_inventory
                ssh_compute_priv: "$ssh_priv_key"
                slurm-install-folder: $install_dir
                slurm-openstack-files-path: $__slurm_repo_dir/openstack_init/slurm-openstack/files
                slurm-openstack-services-path: $__slurm_repo_dir/openstack_init/services
                slurm-openstack-services-path: $__scripts_path" >> $__slurm_repo_dir/openstack_init/ansible/inventory.yml
outputs:
  slurm_company_priv_key:
    description: Private key
    value: { get_attr: [ slurm_company_ssh_key, private_key ] }
  ip_master:
    description: IP address of master node
    value: { get_attr: [master_node, first_address] }
  ip_compute1:
    description: IP address of compute node
    value: { get_attr: [compute1, first_address] }
  ip_compute2:
    description: IP address of compute node
    value: { get_attr: [compute2, first_address] }
  #ips:
   # description: 
